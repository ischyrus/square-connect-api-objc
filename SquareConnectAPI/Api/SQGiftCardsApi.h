#import <Foundation/Foundation.h>
#import "SQCreateGiftCardRequest.h"
#import "SQCreateGiftCardResponse.h"
#import "SQLinkCustomerToGiftCardRequest.h"
#import "SQLinkCustomerToGiftCardResponse.h"
#import "SQListGiftCardsResponse.h"
#import "SQRetrieveGiftCardFromGANRequest.h"
#import "SQRetrieveGiftCardFromGANResponse.h"
#import "SQRetrieveGiftCardFromNonceRequest.h"
#import "SQRetrieveGiftCardFromNonceResponse.h"
#import "SQRetrieveGiftCardResponse.h"
#import "SQUnlinkCustomerFromGiftCardRequest.h"
#import "SQUnlinkCustomerFromGiftCardResponse.h"
#import "SQApi.h"

/**
* Square Connect API
* Client library for accessing the Square Connect APIs
*
* OpenAPI spec version: 2.0
* Contact: developers@squareup.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SQGiftCardsApi: NSObject <SQApi>

extern NSString* kSQGiftCardsApiErrorDomain;
extern NSInteger kSQGiftCardsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SQApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// CreateGiftCard
/// Creates a digital gift card or registers a physical (plastic) gift card. After the gift card  is created, you must call [CreateGiftCardActivity](https://developer.squareup.com/reference/square_2023-10-18/gift-card-activities-api/create-gift-card-activity)  to activate the card with an initial balance before it can be used for payment.
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQCreateGiftCardResponse*
-(NSURLSessionTask*) createGiftCardWithBody: (SQCreateGiftCardRequest*) body
    completionHandler: (void (^)(SQCreateGiftCardResponse* output, NSError* error)) handler;


/// LinkCustomerToGiftCard
/// Links a customer to a gift card, which is also referred to as adding a card on file.
///
/// @param giftCardId The ID of the gift card to be linked.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQLinkCustomerToGiftCardResponse*
-(NSURLSessionTask*) linkCustomerToGiftCardWithGiftCardId: (NSString*) giftCardId
    body: (SQLinkCustomerToGiftCardRequest*) body
    completionHandler: (void (^)(SQLinkCustomerToGiftCardResponse* output, NSError* error)) handler;


/// ListGiftCards
/// Lists all gift cards. You can specify optional filters to retrieve  a subset of the gift cards. Results are sorted by `created_at` in ascending order.
///
/// @param type If a [type](https://developer.squareup.com/reference/square_2023-10-18/enums/GiftCardType) is provided, the endpoint returns gift cards of the specified type. Otherwise, the endpoint returns gift cards of all types. (optional)
/// @param state If a [state](https://developer.squareup.com/reference/square_2023-10-18/enums/GiftCardStatus) is provided, the endpoint returns the gift cards in the specified state. Otherwise, the endpoint returns the gift cards of all states. (optional)
/// @param limit If a limit is provided, the endpoint returns only the specified number of results per page. The maximum value is 200. The default value is 30. For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
/// @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, the endpoint returns the first page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
/// @param customerId If a customer ID is provided, the endpoint returns only the gift cards linked to the specified customer. (optional)
/// 
///  code:200 message:"Success"
///
/// @return SQListGiftCardsResponse*
-(NSURLSessionTask*) listGiftCardsWithType: (NSString*) type
    state: (NSString*) state
    limit: (NSNumber*) limit
    cursor: (NSString*) cursor
    customerId: (NSString*) customerId
    completionHandler: (void (^)(SQListGiftCardsResponse* output, NSError* error)) handler;


/// RetrieveGiftCard
/// Retrieves a gift card using the gift card ID.
///
/// @param _id The ID of the gift card to retrieve.
/// 
///  code:200 message:"Success"
///
/// @return SQRetrieveGiftCardResponse*
-(NSURLSessionTask*) retrieveGiftCardWithId: (NSString*) _id
    completionHandler: (void (^)(SQRetrieveGiftCardResponse* output, NSError* error)) handler;


/// RetrieveGiftCardFromGAN
/// Retrieves a gift card using the gift card account number (GAN).
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQRetrieveGiftCardFromGANResponse*
-(NSURLSessionTask*) retrieveGiftCardFromGANWithBody: (SQRetrieveGiftCardFromGANRequest*) body
    completionHandler: (void (^)(SQRetrieveGiftCardFromGANResponse* output, NSError* error)) handler;


/// RetrieveGiftCardFromNonce
/// Retrieves a gift card using a secure payment token that represents the gift card.
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQRetrieveGiftCardFromNonceResponse*
-(NSURLSessionTask*) retrieveGiftCardFromNonceWithBody: (SQRetrieveGiftCardFromNonceRequest*) body
    completionHandler: (void (^)(SQRetrieveGiftCardFromNonceResponse* output, NSError* error)) handler;


/// UnlinkCustomerFromGiftCard
/// Unlinks a customer from a gift card, which is also referred to as removing a card on file.
///
/// @param giftCardId The ID of the gift card to be unlinked.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQUnlinkCustomerFromGiftCardResponse*
-(NSURLSessionTask*) unlinkCustomerFromGiftCardWithGiftCardId: (NSString*) giftCardId
    body: (SQUnlinkCustomerFromGiftCardRequest*) body
    completionHandler: (void (^)(SQUnlinkCustomerFromGiftCardResponse* output, NSError* error)) handler;



@end
