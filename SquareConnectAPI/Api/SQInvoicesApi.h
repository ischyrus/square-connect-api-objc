#import <Foundation/Foundation.h>
#import "SQCancelInvoiceRequest.h"
#import "SQCancelInvoiceResponse.h"
#import "SQCreateInvoiceRequest.h"
#import "SQCreateInvoiceResponse.h"
#import "SQDeleteInvoiceResponse.h"
#import "SQGetInvoiceResponse.h"
#import "SQListInvoicesResponse.h"
#import "SQPublishInvoiceRequest.h"
#import "SQPublishInvoiceResponse.h"
#import "SQSearchInvoicesRequest.h"
#import "SQSearchInvoicesResponse.h"
#import "SQUpdateInvoiceRequest.h"
#import "SQUpdateInvoiceResponse.h"
#import "SQApi.h"

/**
* Square Connect API
* Client library for accessing the Square Connect APIs
*
* OpenAPI spec version: 2.0
* Contact: developers@squareup.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SQInvoicesApi: NSObject <SQApi>

extern NSString* kSQInvoicesApiErrorDomain;
extern NSInteger kSQInvoicesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SQApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// CancelInvoice
/// Cancels an invoice. The seller cannot collect payments for  the canceled invoice.  You cannot cancel an invoice in the `DRAFT` state or in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
///
/// @param invoiceId The ID of the [invoice](https://developer.squareup.com/reference/square_2023-10-18/objects/Invoice) to cancel.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQCancelInvoiceResponse*
-(NSURLSessionTask*) cancelInvoiceWithInvoiceId: (NSString*) invoiceId
    body: (SQCancelInvoiceRequest*) body
    completionHandler: (void (^)(SQCancelInvoiceResponse* output, NSError* error)) handler;


/// CreateInvoice
/// Creates a draft [invoice](https://developer.squareup.com/reference/square_2023-10-18/objects/Invoice)  for an order created using the Orders API.  A draft invoice remains in your account and no action is taken.  You must publish the invoice before Square can process it (send it to the customer's email address or charge the customerâ€™s card on file).
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQCreateInvoiceResponse*
-(NSURLSessionTask*) createInvoiceWithBody: (SQCreateInvoiceRequest*) body
    completionHandler: (void (^)(SQCreateInvoiceResponse* output, NSError* error)) handler;


/// DeleteInvoice
/// Deletes the specified invoice. When an invoice is deleted, the  associated order status changes to CANCELED. You can only delete a draft  invoice (you cannot delete a published invoice, including one that is scheduled for processing).
///
/// @param invoiceId The ID of the invoice to delete.
/// @param version The version of the [invoice](https://developer.squareup.com/reference/square_2023-10-18/objects/Invoice) to delete. If you do not know the version, you can call [GetInvoice](https://developer.squareup.com/reference/square_2023-10-18/invoices-api/get-invoice) or  [ListInvoices](https://developer.squareup.com/reference/square_2023-10-18/invoices-api/list-invoices). (optional)
/// 
///  code:200 message:"Success"
///
/// @return SQDeleteInvoiceResponse*
-(NSURLSessionTask*) deleteInvoiceWithInvoiceId: (NSString*) invoiceId
    version: (NSNumber*) version
    completionHandler: (void (^)(SQDeleteInvoiceResponse* output, NSError* error)) handler;


/// GetInvoice
/// Retrieves an invoice by invoice ID.
///
/// @param invoiceId The ID of the invoice to retrieve.
/// 
///  code:200 message:"Success"
///
/// @return SQGetInvoiceResponse*
-(NSURLSessionTask*) getInvoiceWithInvoiceId: (NSString*) invoiceId
    completionHandler: (void (^)(SQGetInvoiceResponse* output, NSError* error)) handler;


/// ListInvoices
/// Returns a list of invoices for a given location. The response  is paginated. If truncated, the response includes a `cursor` that you     use in a subsequent request to retrieve the next set of invoices.
///
/// @param locationId The ID of the location for which to list invoices.
/// @param cursor A pagination cursor returned by a previous call to this endpoint.  Provide this cursor to retrieve the next set of results for your original query.  For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination). (optional)
/// @param limit The maximum number of invoices to return (200 is the maximum &#x60;limit&#x60;).  If not provided, the server uses a default limit of 100 invoices. (optional)
/// 
///  code:200 message:"Success"
///
/// @return SQListInvoicesResponse*
-(NSURLSessionTask*) listInvoicesWithLocationId: (NSString*) locationId
    cursor: (NSString*) cursor
    limit: (NSNumber*) limit
    completionHandler: (void (^)(SQListInvoicesResponse* output, NSError* error)) handler;


/// PublishInvoice
/// Publishes the specified draft invoice.   After an invoice is published, Square  follows up based on the invoice configuration. For example, Square  sends the invoice to the customer's email address, charges the customer's card on file, or does  nothing. Square also makes the invoice available on a Square-hosted invoice page.   The invoice `status` also changes from `DRAFT` to a status  based on the invoice configuration. For example, the status changes to `UNPAID` if  Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the  invoice amount.
///
/// @param invoiceId The ID of the invoice to publish.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQPublishInvoiceResponse*
-(NSURLSessionTask*) publishInvoiceWithInvoiceId: (NSString*) invoiceId
    body: (SQPublishInvoiceRequest*) body
    completionHandler: (void (^)(SQPublishInvoiceResponse* output, NSError* error)) handler;


/// SearchInvoices
/// Searches for invoices from a location specified in  the filter. You can optionally specify customers in the filter for whom to  retrieve invoices. In the current implementation, you can only specify one location and  optionally one customer.  The response is paginated. If truncated, the response includes a `cursor`  that you use in a subsequent request to retrieve the next set of invoices.
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQSearchInvoicesResponse*
-(NSURLSessionTask*) searchInvoicesWithBody: (SQSearchInvoicesRequest*) body
    completionHandler: (void (^)(SQSearchInvoicesResponse* output, NSError* error)) handler;


/// UpdateInvoice
/// Updates an invoice by modifying fields, clearing fields, or both. For most updates, you can use a sparse  `Invoice` object to add fields or change values and use the `fields_to_clear` field to specify fields to clear.  However, some restrictions apply. For example, you cannot change the `order_id` or `location_id` field and you  must provide the complete `custom_fields` list to update a custom field. Published invoices have additional restrictions.
///
/// @param invoiceId The ID of the invoice to update.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQUpdateInvoiceResponse*
-(NSURLSessionTask*) updateInvoiceWithInvoiceId: (NSString*) invoiceId
    body: (SQUpdateInvoiceRequest*) body
    completionHandler: (void (^)(SQUpdateInvoiceResponse* output, NSError* error)) handler;



@end
