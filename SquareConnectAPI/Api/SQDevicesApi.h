#import <Foundation/Foundation.h>
#import "SQCreateDeviceCodeRequest.h"
#import "SQCreateDeviceCodeResponse.h"
#import "SQGetDeviceCodeResponse.h"
#import "SQGetDeviceResponse.h"
#import "SQListDeviceCodesResponse.h"
#import "SQListDevicesResponse.h"
#import "SQApi.h"

/**
* Square Connect API
* Client library for accessing the Square Connect APIs
*
* OpenAPI spec version: 2.0
* Contact: developers@squareup.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SQDevicesApi: NSObject <SQApi>

extern NSString* kSQDevicesApiErrorDomain;
extern NSInteger kSQDevicesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SQApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// CreateDeviceCode
/// Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected terminal mode.
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQCreateDeviceCodeResponse*
-(NSURLSessionTask*) createDeviceCodeWithBody: (SQCreateDeviceCodeRequest*) body
    completionHandler: (void (^)(SQCreateDeviceCodeResponse* output, NSError* error)) handler;


/// GetDevice
/// Retrieves Device with the associated `device_id`.
///
/// @param deviceId The unique ID for the desired &#x60;Device&#x60;.
/// 
///  code:200 message:"Success"
///
/// @return SQGetDeviceResponse*
-(NSURLSessionTask*) getDeviceWithDeviceId: (NSString*) deviceId
    completionHandler: (void (^)(SQGetDeviceResponse* output, NSError* error)) handler;


/// GetDeviceCode
/// Retrieves DeviceCode with the associated ID.
///
/// @param _id The unique identifier for the device code.
/// 
///  code:200 message:"Success"
///
/// @return SQGetDeviceCodeResponse*
-(NSURLSessionTask*) getDeviceCodeWithId: (NSString*) _id
    completionHandler: (void (^)(SQGetDeviceCodeResponse* output, NSError* error)) handler;


/// ListDeviceCodes
/// Lists all DeviceCodes associated with the merchant.
///
/// @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information. (optional)
/// @param locationId If specified, only returns DeviceCodes of the specified location. Returns DeviceCodes of all locations if empty. (optional)
/// @param productType If specified, only returns DeviceCodes targeting the specified product type. Returns DeviceCodes of all product types if empty. (optional)
/// @param status If specified, returns DeviceCodes with the specified statuses. Returns DeviceCodes of status &#x60;PAIRED&#x60; and &#x60;UNPAIRED&#x60; if empty. (optional)
/// 
///  code:200 message:"Success"
///
/// @return SQListDeviceCodesResponse*
-(NSURLSessionTask*) listDeviceCodesWithCursor: (NSString*) cursor
    locationId: (NSString*) locationId
    productType: (NSString*) productType
    status: (NSString*) status
    completionHandler: (void (^)(SQListDeviceCodesResponse* output, NSError* error)) handler;


/// ListDevices
/// List devices associated with the merchant. Currently, only Terminal API devices are supported.
///
/// @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. See [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination) for more information. (optional)
/// @param sortOrder The order in which results are listed. - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default). (optional)
/// @param limit The number of results to return in a single page. (optional)
/// @param locationId If present, only returns devices at the target location. (optional)
/// 
///  code:200 message:"Success"
///
/// @return SQListDevicesResponse*
-(NSURLSessionTask*) listDevicesWithCursor: (NSString*) cursor
    sortOrder: (NSString*) sortOrder
    limit: (NSNumber*) limit
    locationId: (NSString*) locationId
    completionHandler: (void (^)(SQListDevicesResponse* output, NSError* error)) handler;



@end
