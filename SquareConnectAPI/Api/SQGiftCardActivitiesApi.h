#import <Foundation/Foundation.h>
#import "SQCreateGiftCardActivityRequest.h"
#import "SQCreateGiftCardActivityResponse.h"
#import "SQListGiftCardActivitiesResponse.h"
#import "SQApi.h"

/**
* Square Connect API
* Client library for accessing the Square Connect APIs
*
* OpenAPI spec version: 2.0
* Contact: developers@squareup.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SQGiftCardActivitiesApi: NSObject <SQApi>

extern NSString* kSQGiftCardActivitiesApiErrorDomain;
extern NSInteger kSQGiftCardActivitiesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SQApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// CreateGiftCardActivity
/// Creates a gift card activity to manage the balance or state of a [gift card](https://developer.squareup.com/reference/square_2023-10-18/objects/GiftCard).  For example, you create an `ACTIVATE` activity to activate a gift card with an initial balance  before the gift card can be used.
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQCreateGiftCardActivityResponse*
-(NSURLSessionTask*) createGiftCardActivityWithBody: (SQCreateGiftCardActivityRequest*) body
    completionHandler: (void (^)(SQCreateGiftCardActivityResponse* output, NSError* error)) handler;


/// ListGiftCardActivities
/// Lists gift card activities. By default, you get gift card activities for all gift cards in the seller's account. You can optionally specify query parameters to filter the list. For example, you can get a list of gift card activities for a gift card, for all gift cards in a specific region, or for activities within a time window.
///
/// @param giftCardId If a gift card ID is provided, the endpoint returns activities related  to the specified gift card. Otherwise, the endpoint returns all gift card activities for  the seller. (optional)
/// @param type If a [type](https://developer.squareup.com/reference/square_2023-10-18/objects/GiftCardActivityType) is provided, the endpoint returns gift card activities of the specified type.  Otherwise, the endpoint returns all types of gift card activities. (optional)
/// @param locationId If a location ID is provided, the endpoint returns gift card activities for the specified location.  Otherwise, the endpoint returns gift card activities for all locations. (optional)
/// @param beginTime The timestamp for the beginning of the reporting period, in RFC 3339 format. This start time is inclusive. The default value is the current time minus one year. (optional)
/// @param endTime The timestamp for the end of the reporting period, in RFC 3339 format. This end time is inclusive. The default value is the current time. (optional)
/// @param limit If a limit is provided, the endpoint returns the specified number  of results (or fewer) per page. The maximum value is 100. The default value is 50. For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
/// @param cursor A pagination cursor returned by a previous call to this endpoint. Provide this cursor to retrieve the next set of results for the original query. If a cursor is not provided, the endpoint returns the first page of the results. For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination). (optional)
/// @param sortOrder The order in which the endpoint returns the activities, based on &#x60;created_at&#x60;. - &#x60;ASC&#x60; - Oldest to newest. - &#x60;DESC&#x60; - Newest to oldest (default). (optional)
/// 
///  code:200 message:"Success"
///
/// @return SQListGiftCardActivitiesResponse*
-(NSURLSessionTask*) listGiftCardActivitiesWithGiftCardId: (NSString*) giftCardId
    type: (NSString*) type
    locationId: (NSString*) locationId
    beginTime: (NSString*) beginTime
    endTime: (NSString*) endTime
    limit: (NSNumber*) limit
    cursor: (NSString*) cursor
    sortOrder: (NSString*) sortOrder
    completionHandler: (void (^)(SQListGiftCardActivitiesResponse* output, NSError* error)) handler;



@end
