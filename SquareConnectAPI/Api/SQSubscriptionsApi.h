#import <Foundation/Foundation.h>
#import "SQBulkSwapPlanRequest.h"
#import "SQBulkSwapPlanResponse.h"
#import "SQCancelSubscriptionResponse.h"
#import "SQChangeBillingAnchorDateRequest.h"
#import "SQChangeBillingAnchorDateResponse.h"
#import "SQCreateSubscriptionRequest.h"
#import "SQCreateSubscriptionResponse.h"
#import "SQDeleteSubscriptionActionResponse.h"
#import "SQListSubscriptionEventsResponse.h"
#import "SQPauseSubscriptionRequest.h"
#import "SQPauseSubscriptionResponse.h"
#import "SQResumeSubscriptionRequest.h"
#import "SQResumeSubscriptionResponse.h"
#import "SQRetrieveSubscriptionResponse.h"
#import "SQSearchSubscriptionsRequest.h"
#import "SQSearchSubscriptionsResponse.h"
#import "SQSwapPlanRequest.h"
#import "SQSwapPlanResponse.h"
#import "SQUpdateSubscriptionRequest.h"
#import "SQUpdateSubscriptionResponse.h"
#import "SQApi.h"

/**
* Square Connect API
* Client library for accessing the Square Connect APIs
*
* OpenAPI spec version: 2.0
* Contact: developers@squareup.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SQSubscriptionsApi: NSObject <SQApi>

extern NSString* kSQSubscriptionsApiErrorDomain;
extern NSInteger kSQSubscriptionsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SQApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// BulkSwapPlan
/// Schedules a plan variation change for all active subscriptions under a given plan variation. For more information, see [Swap Subscription Plan Variations](https://developer.squareup.com/docs/subscriptions-api/swap-plan-variations).
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQBulkSwapPlanResponse*
-(NSURLSessionTask*) bulkSwapPlanWithBody: (SQBulkSwapPlanRequest*) body
    completionHandler: (void (^)(SQBulkSwapPlanResponse* output, NSError* error)) handler;


/// CancelSubscription
/// Schedules a `CANCEL` action to cancel an active subscription. This  sets the `canceled_date` field to the end of the active billing period. After this date,  the subscription status changes from ACTIVE to CANCELED.
///
/// @param subscriptionId The ID of the subscription to cancel.
/// 
///  code:200 message:"Success"
///
/// @return SQCancelSubscriptionResponse*
-(NSURLSessionTask*) cancelSubscriptionWithSubscriptionId: (NSString*) subscriptionId
    completionHandler: (void (^)(SQCancelSubscriptionResponse* output, NSError* error)) handler;


/// ChangeBillingAnchorDate
/// Changes the [billing anchor date](https://developer.squareup.com/docs/subscriptions-api/subscription-billing#billing-dates) for a subscription.
///
/// @param subscriptionId The ID of the subscription to update the billing anchor date.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQChangeBillingAnchorDateResponse*
-(NSURLSessionTask*) changeBillingAnchorDateWithSubscriptionId: (NSString*) subscriptionId
    body: (SQChangeBillingAnchorDateRequest*) body
    completionHandler: (void (^)(SQChangeBillingAnchorDateResponse* output, NSError* error)) handler;


/// CreateSubscription
/// Enrolls a customer in a subscription.  If you provide a card on file in the request, Square charges the card for the subscription. Otherwise, Square sends an invoice to the customer's email address. The subscription starts immediately, unless the request includes the optional `start_date`. Each individual subscription is associated with a particular location.  For more information, see [Create a subscription](https://developer.squareup.com/docs/subscriptions-api/manage-subscriptions#create-a-subscription).
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQCreateSubscriptionResponse*
-(NSURLSessionTask*) createSubscriptionWithBody: (SQCreateSubscriptionRequest*) body
    completionHandler: (void (^)(SQCreateSubscriptionResponse* output, NSError* error)) handler;


/// DeleteSubscriptionAction
/// Deletes a scheduled action for a subscription.
///
/// @param subscriptionId The ID of the subscription the targeted action is to act upon.
/// @param actionId The ID of the targeted action to be deleted.
/// 
///  code:200 message:"Success"
///
/// @return SQDeleteSubscriptionActionResponse*
-(NSURLSessionTask*) deleteSubscriptionActionWithSubscriptionId: (NSString*) subscriptionId
    actionId: (NSString*) actionId
    completionHandler: (void (^)(SQDeleteSubscriptionActionResponse* output, NSError* error)) handler;


/// ListSubscriptionEvents
/// Lists all [events](https://developer.squareup.com/docs/subscriptions-api/actions-events) for a specific subscription.
///
/// @param subscriptionId The ID of the subscription to retrieve the events for.
/// @param cursor When the total number of resulting subscription events exceeds the limit of a paged response,  specify the cursor returned from a preceding response here to fetch the next set of results. If the cursor is unset, the response contains the last page of the results.  For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination). (optional)
/// @param limit The upper limit on the number of subscription events to return in a paged response. (optional)
/// 
///  code:200 message:"Success"
///
/// @return SQListSubscriptionEventsResponse*
-(NSURLSessionTask*) listSubscriptionEventsWithSubscriptionId: (NSString*) subscriptionId
    cursor: (NSString*) cursor
    limit: (NSNumber*) limit
    completionHandler: (void (^)(SQListSubscriptionEventsResponse* output, NSError* error)) handler;


/// PauseSubscription
/// Schedules a `PAUSE` action to pause an active subscription.
///
/// @param subscriptionId The ID of the subscription to pause.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQPauseSubscriptionResponse*
-(NSURLSessionTask*) pauseSubscriptionWithSubscriptionId: (NSString*) subscriptionId
    body: (SQPauseSubscriptionRequest*) body
    completionHandler: (void (^)(SQPauseSubscriptionResponse* output, NSError* error)) handler;


/// ResumeSubscription
/// Schedules a `RESUME` action to resume a paused or a deactivated subscription.
///
/// @param subscriptionId The ID of the subscription to resume.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQResumeSubscriptionResponse*
-(NSURLSessionTask*) resumeSubscriptionWithSubscriptionId: (NSString*) subscriptionId
    body: (SQResumeSubscriptionRequest*) body
    completionHandler: (void (^)(SQResumeSubscriptionResponse* output, NSError* error)) handler;


/// RetrieveSubscription
/// Retrieves a specific subscription.
///
/// @param subscriptionId The ID of the subscription to retrieve.
/// @param include A query parameter to specify related information to be included in the response.   The supported query parameter values are:   - &#x60;actions&#x60;: to include scheduled actions on the targeted subscription. (optional)
/// 
///  code:200 message:"Success"
///
/// @return SQRetrieveSubscriptionResponse*
-(NSURLSessionTask*) retrieveSubscriptionWithSubscriptionId: (NSString*) subscriptionId
    include: (NSString*) include
    completionHandler: (void (^)(SQRetrieveSubscriptionResponse* output, NSError* error)) handler;


/// SearchSubscriptions
/// Searches for subscriptions.  Results are ordered chronologically by subscription creation date. If the request specifies more than one location ID, the endpoint orders the result by location ID, and then by creation date within each location. If no locations are given in the query, all locations are searched.  You can also optionally specify `customer_ids` to search by customer. If left unset, all customers associated with the specified locations are returned. If the request specifies customer IDs, the endpoint orders results first by location, within location by customer ID, and within customer by subscription creation date.
///
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQSearchSubscriptionsResponse*
-(NSURLSessionTask*) searchSubscriptionsWithBody: (SQSearchSubscriptionsRequest*) body
    completionHandler: (void (^)(SQSearchSubscriptionsResponse* output, NSError* error)) handler;


/// SwapPlan
/// Schedules a `SWAP_PLAN` action to swap a subscription plan variation in an existing subscription.  For more information, see [Swap Subscription Plan Variations](https://developer.squareup.com/docs/subscriptions-api/swap-plan-variations).
///
/// @param subscriptionId The ID of the subscription to swap the subscription plan for.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQSwapPlanResponse*
-(NSURLSessionTask*) swapPlanWithSubscriptionId: (NSString*) subscriptionId
    body: (SQSwapPlanRequest*) body
    completionHandler: (void (^)(SQSwapPlanResponse* output, NSError* error)) handler;


/// UpdateSubscription
/// Updates a subscription by modifying or clearing `subscription` field values. To clear a field, set its value to `null`.
///
/// @param subscriptionId The ID of the subscription to update.
/// @param body An object containing the fields to POST for the request.  See the corresponding object definition for field details.
/// 
///  code:200 message:"Success"
///
/// @return SQUpdateSubscriptionResponse*
-(NSURLSessionTask*) updateSubscriptionWithSubscriptionId: (NSString*) subscriptionId
    body: (SQUpdateSubscriptionRequest*) body
    completionHandler: (void (^)(SQUpdateSubscriptionResponse* output, NSError* error)) handler;



@end
