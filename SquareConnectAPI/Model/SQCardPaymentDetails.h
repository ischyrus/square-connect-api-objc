#import <Foundation/Foundation.h>
#import "SQObject.h"

/**
* Square Connect API
* Client library for accessing the Square Connect APIs
*
* OpenAPI spec version: 2.0
* Contact: developers@squareup.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#import "SQCard.h"
#import "SQCardPaymentTimeline.h"
#import "SQDeviceDetails.h"
#import "SQError.h"
@protocol SQCard;
@class SQCard;
@protocol SQCardPaymentTimeline;
@class SQCardPaymentTimeline;
@protocol SQDeviceDetails;
@class SQDeviceDetails;
@protocol SQError;
@class SQError;



@protocol SQCardPaymentDetails
@end

@interface SQCardPaymentDetails : SQObject

/* The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or FAILED. [optional]
 */
@property(nonatomic) NSString* status;
/* The credit card's non-confidential details. [optional]
 */
@property(nonatomic) SQCard* card;
/* The method used to enter the card's details for the payment. The method can be `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`. [optional]
 */
@property(nonatomic) NSString* entryMethod;
/* The status code returned from the Card Verification Value (CVV) check. The code can be `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`. [optional]
 */
@property(nonatomic) NSString* cvvStatus;
/* The status code returned from the Address Verification System (AVS) check. The code can be `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`. [optional]
 */
@property(nonatomic) NSString* avsStatus;
/* The status code returned by the card issuer that describes the payment's authorization status. [optional]
 */
@property(nonatomic) NSString* authResultCode;
/* For EMV payments, the application ID identifies the EMV application used for the payment. [optional]
 */
@property(nonatomic) NSString* applicationIdentifier;
/* For EMV payments, the human-readable name of the EMV application used for the payment. [optional]
 */
@property(nonatomic) NSString* applicationName;
/* For EMV payments, the cryptogram generated for the payment. [optional]
 */
@property(nonatomic) NSString* applicationCryptogram;
/* For EMV payments, the method used to verify the cardholder's identity. The method can be `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`. [optional]
 */
@property(nonatomic) NSString* verificationMethod;
/* For EMV payments, the results of the cardholder verification. The result can be `SUCCESS`, `FAILURE`, or `UNKNOWN`. [optional]
 */
@property(nonatomic) NSString* verificationResults;
/* The statement description sent to the card networks.  Note: The actual statement description varies and is likely to be truncated and appended with additional information on a per issuer basis. [optional]
 */
@property(nonatomic) NSString* statementDescription;
/* __Deprecated__: Use `Payment.device_details` instead.  Details about the device that took the payment. [optional]
 */
@property(nonatomic) SQDeviceDetails* deviceDetails;
/* The timeline for card payments. [optional]
 */
@property(nonatomic) SQCardPaymentTimeline* cardPaymentTimeline;
/* Whether the card must be physically present for the payment to be refunded.  If set to `true`, the card must be present. [optional]
 */
@property(nonatomic) NSNumber* refundRequiresCardPresence;
/* Information about errors encountered during the request. [optional]
 */
@property(nonatomic) NSArray<SQError>* errors;

@end
